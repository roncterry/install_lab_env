# Config File Syntax Version: 2021111501
##############################################################################
#                          Variables
##############################################################################

#-----------------------------------------------------------------------------
#    SECTION: Course Name/ID Configuration
#-----------------------------------------------------------------------------

# This should be a short but descriptive name of the course lab environment
#
COURSE_NAME="My Test Course"


# This should be the course number
#
COURSE_NUM="TEST101"


#-----------------------------------------------------------------------------
#    SECTION: Test Requirements
#-----------------------------------------------------------------------------

# Which tests do you need to run on the lab machine to ensure it will work?
#
# A number of tests can be performed on the lab machine to ensure everthing
# required for the lab environment to run is present/enabled/configured. The
# default is for all tests to run, meaning that if not specifically set to 'N', 
# a test will run.
#
# The following are the currently available tests. Additional tests may be added
# in the future.  However, because the defualt behavior is to run a test
# unless specificaly told not to, a configuration file created for an earlier
# set of available tests should continue working when new tests are added.
# 
# REQUIRE_VT_ENABLED
#   This will check to make sure that VT is enabled in the BIOS. This is 
#   typically required if you are going to be using a hypervisor to run VMs in
#   the lab environment. 
#
#   This should probably be set to Y.
#
# REQUIRE_MIN_CPUS
#   This will check to make sure that the lab machine has enough CPUs as
#   specified in the MIN_CPUS variable later in this configuration file.
#
# REQUIRE_MIN_MEMORY
#   This will check to make sure that the lab machine has enough memory as
#   specified in the MIN_MEMORY variable later in this configuration file.
#
# REQUIRE_MIN_DISKSPACE
#   This will check to make sure that the lab machine has enough free disk space
#   as specified in the MIN_DISK_FREE variable later in this configuration file.
#
# REQUIRE_REGULAR_USER
#   This will check to make sure the current user is a regular user and not
#   the root user. 
#
#   This should always be set to Y unless you know for sure it should be N.
#
# REQUIRE_SUDO_NOPASSWD
#   This will check to make sure sudo is installed and the the current user has
#   ALL=(ALL) :NOPASSWD ALL set in the /ect/sudoers file.
#   This is more important than it seems becuase a greate deal of what this
#   script does requires root priviliges.
#
#   This should always be set to Y unless you know for sure it should be N.
#
# REQUIRE_P7ZIP
#   This checks to make sure the p7zip package (7z command) is installed. 
#   This is important because virtual machine archives in the student media are 
#   typically created using this utility.
#
#   It is safe to leave this set to Y.
#
# REQUIRE_KVM_VIRT
#   This checks to make sure the KVM kernel module is loaded and KVM is enabled.
#   The default hypervisor for SUSE lab evironments is KVM so this will in most
#   all cases be set to Y.
#
# REQUIRE_KVM_NESTED
#   This checks to make sure nested virtualization is enabled in the KVM
#   hypervisor. If your lab environment does not require nested virtualization,
#   you can set this to N. However, even if you do not require nested
#   virtualization it is safe to leave it set to Y.
#
# REQUIRE_QEMU_OVMF
#   This checks to make sure the qemu-ovmf-x86_64 package is installed.
#   This package is required if you have KVM VMs that boot using UEFI.
#   However, even if you do not have VMs that boot using UEFI it is safe to 
#   leave it set to Y.
#
# REQURE_LIBVIRT
#   This checks to make sure Libvirt is installed and configured to allow a
#   regular user to fully use Libvirt features (i.e. start/stop/define/undefine
#   VMS/virtual networks.etc.). If you are using KVM virtual machine this should
#   definitly be set to Y.
#
# REQUIRE_LIBVIRT_TCP_LISTEN
#   This checks to make sure Libvirt is listening via TCP with no authentication.
#   This can be required if you are having VMs talk to the Libvirt daemon for
#   things such as STONTIH fencing in a cluster or Virt-Manager in a VM that can
#   see and manage VMs on the host.
#   NOTE: This can be considered a security risk. If possible you should also
#         run a host firewall and allow only the networks you want to access
#         Libvirt and your VMs.
#
# REQUIRE_LIBVIRT_QEMU_VNC_SPICE_LISTEN
#   This checks to see if the Libvirt QEMU driver is allowing VNC and Spice 
#   connections from all public network interfaces. This can be required if you
#   are allowing Virt-manager running in a VM to access the graphical consoles
#   of your running VMs.
#   NOTE: This can be concidered a security risk. If possible you should also
#         run a host firewall and allow only the networks you want to access
#         graphical consoles of your VMs.
#
# REQUIRE_VIRTUALBMC
#   This checks to make sure the python-virtualbmc package (vbmc command) is 
#   installed. This is important when your virtual machines require a BMC
#   (IPMI) device.
#
#   When using the standard lab machine image it is safe to leave this set to Y.
#
# REQUIRE_OPENVSWITCH
#   This checks to make sure the openvswitch and openvswitch-ovn-* packages 
#   are installed. This is important when your lab environment requires 
#   Open vSwitch based virtual networks or OpenvSwitch based connectivity 
#   between lab machines in a multi-labmachine environment.
#
#   When using the standard lab machine image it is safe to leave this set to Y.
#
# REQUIRE_SWTPM
#   This checks to make sure the swtpm package (swtpm command) is 
#   installed. This is important when your virtual machines require a TPM
#   device.
#
#   When using the standard lab machine image it is safe to leave this set to Y.
#
REQUIRE_VT_ENABLED=Y
REQUIRE_MIN_CPUS=Y
REQUIRE_MIN_MEMORY=Y
REQUIRE_MIN_DISKSPACE=Y
REQIURE_REGULAR_USER=Y
REQUIRE_SUDO_NOPASSWD=Y
REQUIRE_P7ZIP=Y
REQUIRE_KVM_VIRT=Y
REQUIRE_KVM_NESTED=Y
REQUIRE_QEMU_OVMF=Y
REQUIRE_LIBVIRT=Y
REQUIRE_LIBVIRT_TCP_LISTEN=Y
REQUIRE_LIBVIRT_QEMU_VNC_SPICE_LISTEN=Y
REQUIRE_VIRTUALBMC=N
REQUIRE_OPENVSWITCH=N
REQUIRE_SWTPM=N


#-----------------------------------------------------------------------------
#    SECTION: Hardware Requirements
#-----------------------------------------------------------------------------

# The amount of disk space and RAM required to run the lab environment
#
# These values are in GB. The "GB" will be automatically apended.
#
MIN_DISK_FREE=10
MIN_MEMORY=1


# The number of CPUs required to run the lab environment
#
MIN_CPUS=1


#-----------------------------------------------------------------------------
#    SECTION: Libvirt VMs Configuration
#-----------------------------------------------------------------------------

# A space delimited list of Libvirt VMs
#
# VMs should exist in a single directory and contain the disk images and a
# XML config. 
#
# The XML config file should be the same name as the directory + ".xml".
#
# These VMs shoud be archive (i.e. .7z) files of the directory with the 
# extension ".7x.xxx" It is assumed that the VM directories reside in 
# "/home/VMs". All paths to disk images should be relative to the VM 
# directory in that directory.
#
# The VMs listed in LIBVIRT_VM_LIST should be the names of the files without 
# the ".7z.xxx"
#
LIBVIRT_VM_LIST=""


# Create an initial snapshot of Libvirt VMs after they have been installed 
#
#  Libvirt snapshot are not portiable so creating an initial snapshot 
#  imedeatly after they have been installed give you an initial revert point.
#
LIBVIRT_CREATE_INITIAL_SNAPSHOT=""


# Name to use for the initial VM snapshot if created 
#
# Name to use for the initial snapshot of the VMs if the 
# LIBVIRT_CREATE_INITIAL_SNAPSHOT is set you Y
#
LIBVIRT_INITIAL_SNAPSHOT_NAME=""


# A space delimieted list of Libvirt VM names that should be started by 
# the installation script.
#
# These VMs should only be VMs that are listed in $LIBVIRT_VM_LIST.
#
LIBVIRT_START_VM_LIST=""


# Change the VM's config file to set the CPU to the hypervisor default.
#
# This can be useful if you are not sure which version of Libvirt created the 
# VMs config file or if the CPU the VM will be run on will supprort the version
# Specified in the VM's config file.
# (Most usefull for VMs created on newer OSes but installed/run on older OSes)
#
# Setting this to 'y' can potentialy fix problems where the VM won't boot or
# it is getting a kernel panic.  
#
LIBVIRT_SET_CPU_TO_HYPERVISOR_DEFAULT="n"


# Change the VM's config file to set the machine type to the highest supported
# version.
#
# This can be useful if you are not sure which version of Libvirt created the 
# VMs config file or if the machine type specified in the VM's original config 
# file is supported on the current version of Libvirt/KVM.
# (Most usefull for VMs created on newer OSes but installed/run on older OSes)
#
# Setting this to 'y' can potentialy fix problems where the VM won't boot.
#
KVM_SET_MACHINE_TYPE_TO_HIGHEST_SUPPORTED="n"


# If you want to have the installation script autobuild any Libvirt VMs, put
# the name of the configuration file for the create-vms.sh utility in this
# variable. (Requres the create-vms.sh script be available and in the PATH)
#
# This file should be in the $VM_AUTOBUILD_CONFIG_DIR so that is gets 
# installed into the $SCRIPTS_DEST_DIR/$VM_AUTOBUILD_SCRIPT_DIR/ during the
# lab environment installation.
#
# To use this feature, you must have the create-vms directory in the
# $SCRIPTS_DEST_DIR directory so that it can be installed.
#
LIBVIRT_AUTOBUILD_VM_CONFIG=""


#-----------------------------------------------------------------------------
#    SECTION: Libvirt Virtual Network Configuration
#-----------------------------------------------------------------------------

# A space delimited list of Libvirt virtual networks. The network configs in 
# LIBVIRT_VNET_LIST should be the names of the Libvirt virtual networks.
#
# The config files that define these networks should be named <vnet_name>.xml
# and they should reside in the config/libvirt.cfg directory.
#
LIBVIRT_VNET_LIST=""


#-----------------------------------------------------------------------------
#    SECTION: Libvirt Storage Pool Definitions
#-----------------------------------------------------------------------------

# A space delimited list of Libvirt storage pools. The pool configs in 
# LIBVIRT_POOL_LIST should be the names of the Libvirt storage pools.
#
# The config files that define these pools should be named <pool_name>.xml
# and they should reside in the config/libvirt.cfg directory.
#
LIBVIRT_POOL_LIST=""


# A space delimited list of Libvirt volumes to be created/defined in the
# storage pools. The volume configs in LIBVIRT_VOLUME_LIST should be the 
# names of the Libvirt volumes to be created/defined in the storage pools.
#
# The config files that define these networks should be named 
# <pool_name>+<volume_name>.xml
# and they should reside in the config/libvirt.cfg directory.
#
# Example: 
#  LIBVIRT_VOLUME_LIST="mypool+vol1.qcow2 mypool+vol2.raw"
#
LIBVIRT_VOLUME_LIST=""


#-----------------------------------------------------------------------------
#    SECTION: VirtualBMC Definitions
#-----------------------------------------------------------------------------

# Network for the virtual BMC devices
#
# This should be the name of one of your virtual networks/bridges defined
# in LIBVIRT_NETWORK_LIST or BRIDGE_LIST. If it is a Libvirt network then
# it must match the name of the bridge created by the Libvirt network.
#
# Note: 
#       You can also define the virtual BMC devices on a per VM basis by
#       creating a file in the VM's directory named VM.vbmc (where VM
#       matches the name of the VM). This file should contain this
#       variable (VIRTUAL_BMC_NETWORK) and the following variable
#       (VIRTUAL_BMC_LIST) with only values matching the prameters for 
#       the virtual BMC device for that VM. The syntax for the variables 
#       is the same as in this file.
#
#       For the per VM method to work you must have the vbmcctl command
#       installed on your host machine and in your path.
#
#       It is recommended that you only define a virtual BMC device in one
#       place, either in the variable in this file or in a file in the VM's
#       directory.
#
VIRTUAL_BMC_NETWORK=""


# The BMC entries in VIRTUAL_BMC_LIST should be a space delimited list of
# comma delimited values in this order: 
#  VM Name  (name of the VM in Libvirt)
#  Host BMC IP  (IP address on the host the BMC listens on: Default=127.0.0.1)
#  BMC Port  (port the BMC will listed on: Default=623)
#  BMC Username  (username to log in to the BMC as: Default=admin)
#  BMC Password  (password for the BMC user: Default=password)
#  BMC Libvirt URI  (URI for the Libvirt server when the VM is running: Default=qemu:///system)
#
# Example 1:
#  VIRTUAL_BMC_LIST="SOC201-controller01,192.168.124.1,6230,admin,linux,qemu:///system SOC201-compute01,192.168.124.1,6231,admin,linux,qemu:///system"
#
# If you want to use the default value for a field just leave that field empty.
#
# Example 2 (using default username, password and Libvirt URI):
#  VIRTUAL_BMC_LIST="SOC201-controller01,192.168.124.1,6230,,, SOC201-compute01,192.168.124.1,6231,,,"
#
# The VM names should only be VMs that are listed in $LIBVIRT_VM_LIST.
#
# Note: 
#       You can also define the virtual BMC devices on a per VM basis by
#       creating a file in the VM's directory named VM.vbmc (where VM
#       matches the name of the VM). This file should contain this
#       variable (VIRTUAL_BMC_LIST) and the previous variable
#       (VIRTUAL_BMC_NETWORK) with only values matching the prameters for 
#       the virtual BMC device for that VM. The syntax for the variables 
#       is the same as in this file.
#
#       For the per VM method to work you must have the vbmcctl command
#       installed on your host machine and in your path.
#
#       It is recommended that you only define a virtual BMC device in one
#       place, either in the variable in this file or in a file in the VM's
#       directory.
#
VIRTUAL_BMC_LIST=""


#-----------------------------------------------------------------------------
#    SECTION: ISOs, Cloud Image, Keys, Additional Files Configuration
#-----------------------------------------------------------------------------

# A space delimited list of ISO Images
#
# A space delimited list of ISO image that are either used by the VMs or that
# you wish to provide to the student as part of the lab environment.
#
# These ISO images must reside in /home/iso/${COURSE_NUM}/
#
ISO_LIST=


# A space delimited list of Cloud Images
#
# A space delimited list of disk image files that are either used as 
# cloud images in the labs or that you wish to provide to the student as part
# of the lab environment.
#
# These cloud images must reside in /home/images/${COURSE_NUM}/
#
CLOUD_IMAGE_LIST=


# Install SSH keys/authorized_keys/known_hosts files into the user's ~/.ssh
# directory.
#
# If set to Y the contents of config/ssh/ is copied into ~/.ssh/ and correct 
# permissions are set on the files.
#
# Options: Y and N 
#          (Default=N)
#
INSTALL_SSH_KEYS="N"


# A space delimited list of files that are to be copied into the user's ~/.ssh 
# directory. Typically these will be public/private keys, authorized_keys and
# known_hosts files.
#
# All files must reside in config/ssh
#
SSH_FILE_LIST=""


#-----------------------------------------------------------------------------
#    SECTION: Multi-Labmachine Configuration
#-----------------------------------------------------------------------------

# Will the lab environment be spread accross multiple lab machines?
#
# If set to Y then the installation script will know that the VMs for the
# lab environment are going to be spread accross multiple lab machines. If set 
# to N then all VMs for the lab environment will be on a single lab machine.
#
MULTI_LAB_MACHINE="N"


# Name extension added to VM configuration files when the lab environment
# is spread accross multiple lab machines.
#
# If the VMs in the lab environment are spread accross multiple lab machines
# (typically due to the lab machines not having enough RAM for them to be on
# a single  machine) then the pre-installed/configured VMs will need to have
# an alternate VM config file that defines a different virtual network
# configuration (i.e. VLANs+bridges instead of Libvirt virtual networks).
# This alternate VM config file should reside in the VM's directory along
# side the original VM config file and will need to be named in a specific
# way. The file name should be: VM_NAME-MULTI_LM_EXT.xml
#
# Example: single lab machine file name = admin.xml
#          multi lab machine file name =  admin-multi_lm.xml
#
# This variable is only used when MULTI_LAB_MACHINE=Y
#
MULTI_LM_EXT="multi_lm"


#-----------------------------------------------------------------------------
#    SECTION: Physical/Advanced Networking Definitions
#-----------------------------------------------------------------------------

# This is used to create basic VLANs
#
# The VLAN names in VLAN_LIST should be a space delimited list of
# comma delimited values in this order: 
#   VLAN name    (example: cloud-admin)
#   node number    (example: 1)
#   VLAN network (example: 192.168.124.0/24)
#   ethernet device (example: eth1)
#   VLAN ID (example: 124)
#
#   Note: If the VLAN should not have an IP address assigned to it, 
#         enter - into the VLAN network field. 
#
# Example 1: "vlan-admin,1,192.168.124.0/24,eth1,124 vlan-storage,1,192.168.125.0/24,eth1,125"
# Example 2: "vlan-admin,1,-,eth1,124 vlan-storage,1,-,eth1,125"
#
VLAN_LIST=""


# This is used to create basic Linux bridges
#
# The bridge names in BRIDGE_LIST should be a space delimited list of
# comma delimited values in this order: 
#   bridge name    (example: cloud-admin)
#   node number    (example: 1)
#   bridge network (example: 192.168.124.0/24)
#   ethernet device (example: eth1)
#
#   Note: If the bridge should not have an IP address assigned to it, 
#         enter - into the bridge network field. 
#
#   Note: The node number is used for the last octet of the nodes IP address
#
#   Note: The ethernet device parameter is optional. If not supplied,
#         the first unconfigured ethernet device will be used.
#
# Example 1: "cloud-admin,1,192.168.124.0/24,eth1 cloud-public,1,192.168.126.0/24,eth1"
# Example 2: "cloud-admin,1,192.168.124.0/24,vlan-admin cloud-storage,1,192.168.125.0/24,vlan-storage"
#
BRIDGE_LIST=""


# This is used to create virtual network interfaces on the host
# These are typically used for host interfaces on VLANS when using 
# Open vSwitch bridges.
#
# Note: When used with a VLAN and an Open vSwitch bridge, the veth pair
#       can be created during the bridge creation rather than here.
#
# The veth names in VETH_LIST should be a space delimited list of
# comma delimited values in this order: 
#   veth name    (example: vlan99)
#   node number  (example: 1)
#   veth network (example: 192.168.99.1/24)
#
#   Note: If the veth should not have an IP address assigned to it, 
#         or it will be assigned durring the Open vSwitch bridge creation,
#         enter - into the veth network field. 
#
#   Note: The node number is used for the last octet of the nodes IP address
#
# Example 1: "veth99,1,-"
# Example 2: "veth99,1,192.168.99.0/24"
# Example 3: "veth99,1,192.168.99.0/24 veth100,1,192.168.100.1/24"
#
VETH_LIST=""


# This is used to create OpenvSwitch based bridges and VLANS
#
# The bridge names in OVS_BRIDGE_LIST should be a space delimited list of
# comma delimited values in this order: 
#   Open vSwitch bridge name    (example: cloud-admin)
#   node number                 (example: 1)
#   Open vSwitch bridge network (example: 192.168.124.0/24)
#   physical device             (example: eth1)
#   parent bridge               (example: ovsbr0)
#   VLAN tag                    (example: 124)
#
#   Note: If the bridge should not have an IP address assigned to it, 
#         enter - into the bridge network field. 
#
#   Note: The node number is used for the last octet of the nodes IP address
#
#   Note: The physical device is the physical network device to attach to the
#         bridge. Note that a network device of any type (ethernet, wifi, etc)
#         can be listed. If the bridge should have no physical device attached
#         enter a - into the physical device field. 
#         If the physical device specified doesn't exist then a veth pair is
#         created with that name.
#
#   Note: The parent bridge field is used when creating a new bridge that
#         corresponds to a VLAN on an Open vSwitch bridge (i.e. a child bridge
#         on a VLAN tagged port on an existing bridge). 
#         The parent bridge should be the name of the Open vSwitch bridge to
#         create the VLAN port on.
#         This parent bridge must be listed in the OVS_BRIDGE_LIST variable
#         before the VLAN tagged bridge is listed. This must be used in 
#         conjunction with VLAN tag.
#         If the bridge is _not_ a VLAN bridge, enter a - into the
#         parent bridge field. 
#
# Example 1: "ovsbr0,1,-,-,-,-"
# Example 1: "ovsbr0,1,192.168.99.0/24,vlan99,-,-"
# Example 2: "ovsbr1,1,-,eth1,-,-"
# Example 3: "ovsbr1,1,-,eth1,-,- cloud-admin,1,192.168.124.0/24,veth124,ovsbr0,124 cloud-public,1,192.168.126.0/24,veth126,ovsbr0,126"
#
OVS_BRIDGE_LIST=""


#-----------------------------------------------------------------------------
#    SECTION: VMware VMs and Networking Configuration
#-----------------------------------------------------------------------------

# List of VMware VM tarballs. 
#
# These VMs shoud be tar.gz files of the directory with the extension ".tgz"
#
# The VMs listed in VMWARE_VM_LIST should be the names of the files without 
# the ".tgz"
#
VMWARE_VM_LIST=""


# List of VMware VM names that shoule be started.
#
# The VMs listed in VMWARE_START_VM_LIST should be a the paths to the VMware
# VM's .vmx files
#
VMWARE_START_VM_LIST=""


# The network configs in VMWARE_VNET_LIST should be the names of the VMware 
# virtual networks.
#
# The config files that define these networks should be in the same directory
# as the Vmware installer and be named networking.<vnet_name>. 
#
# The contents of these files will be appended to the 
# /etc/vmware/networking file.
#
# They should have corresponding <vnet_name>.tgz files in the same 
# directory that contain the virtual network directories tarred up from
# /etc/vmware.
#
VMWARE_VNET_LIST=""


# Uninstall VMware application when lab environment is removed?
#
# Values: y to uninstall application, n to leave application installed
#
UNINSTALL_VMWARE_ON_REMOVE=""


#-----------------------------------------------------------------------------
#    SECTION: Custom Functions/Commands Include File Definitions
#-----------------------------------------------------------------------------

# File containing custom functions for installation of this specific
# lab environment that don't need to be added to the main script.
#
# This file will be sourced at the end of the function definitions in the
# main script.
#
CUSTOM_FUNCTIONS_FILE="config/custom-functions.sh"


# File containing custom install commands or calling the custom functions
# for installation of this specific lab environment.
#
# This file will be sourced at the end ater all other commands/fuctions
# have been executed in the installer script.
#
CUSTOM_INSTALL_COMMANDS_FILE="config/custom-install-commands.sh"


# File containing custom remove commands or calling the custom functions
# for removal of this specific lab environment.
#
# This file will be sourced at the end ater all other commands/fuctions
# have been executed in the removal script.
#
CUSTOM_REMOVE_COMMANDS_FILE="config/custom-remove-commands.sh"
